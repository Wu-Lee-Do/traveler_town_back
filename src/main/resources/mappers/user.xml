<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.travelertown.travelertown.repository.UserMapper">

    <resultMap id="RoleResultMap" type="com.travelertown.travelertown.entity.Role">
        <id property="roleId" column="role_id" />
        <result property="roleName" column="role_name" />
        <result property="roleNameKor" column="role_name_kor" />
    </resultMap>

    <resultMap id="RoleRegisterResultMap" type="com.travelertown.travelertown.entity.RoleRegister">
        <id property="roleRegisterId" column="role_register_id" />
        <result property="userId" column="user_id" />
        <result property="roleId" column="role_id" />
        <association property="role" resultMap="RoleResultMap" />
<!--        1개-->
    </resultMap>

<!--    <resultMap id="OAuth2ResultMap" type="com.study.library.entity.OAuth2">-->
<!--        <id property="oAuth2Id" column="oauth2_id" />-->
<!--        <result property="oAuth2Name" column="oauth2_name" />-->
<!--        <result property="userId" column="user_id" />-->
<!--        <result property="providerName" column="provider_name" />-->
<!--    </resultMap>-->

    <resultMap id="UserResultMap" type="com.travelertown.travelertown.entity.User">
        <id property="userId" column="user_id" />
        <result property="username" column="username" />
        <result property="password" column="password" />
        <result property="nickname" column="nickname" />
        <result property="email" column="email" />
        <result property="sex" column="sex" />
        <result property="age" column="age" />
        <result property="createDate" column="create_date" />
        <result property="updateDate" column="update_date" />
        <collection property="roleRegisters" javaType="list" resultMap="RoleRegisterResultMap" />
<!--        <collection property="oAuth2s" javaType="List" resultMap="OAuth2ResultMap" />-->
<!--        다수-->
    </resultMap>

    <insert
            id="saveUser"
            parameterType="com.travelertown.travelertown.entity.User"
            keyProperty="userId"
            useGeneratedKeys="true"
    >
        insert into
            user_tb
        values
            (0, 2, #{username}, #{password}, #{nickname}, #{email}, 0, 0, now(), now())
    </insert>

    <insert id="saveRole">
        insert into
            role_register_tb
        values(0, #{userId}, #{roleId}, now(), now())
    </insert>

    <select id="findRoleRegisterByUserIdAndRoleId" resultMap="RoleRegisterResultMap">
        select
            rrt.role_register_id,
            rrt.user_id,
            rrt.role_id,
            rt.role_name,
            rt.role_name_kor,
            rrt.create_date,
            rrt.update_date
        from
            role_register_tb rrt
            left outer join role_tb rt on(rt.role_id = rrt.role_id)
        where
            rrt.user_id = #{userId}
            and rrt.role_id = #{roleId}
    </select>

    <select id="findUserByUsername" parameterType="string" resultMap="UserResultMap">
        select
            ut.user_id,
            ut.username,
            ut.password,
            ut.nickname,
            ut.email,
            ut.sex,
            ut.age,
            ut.create_date,
            ut.update_date,
            rrt.role_register_id,
            rrt.role_id,
            rt.role_name,
            rt.role_name_kor
<!--            oat.oauth2_id,-->
<!--            oat.oauth2_name,-->
<!--            oat.provider_name-->
        from
            user_tb ut
            left outer join role_register_tb rrt on(rrt.user_id = ut.user_id)
            left outer join role_tb rt on(rt.role_id = rrt.role_id)
<!--            left outer join oauth2_tb oat on(oat.user_id = ut.user_id)-->
        where
            username = #{username}
    </select>

    <select id="findUserByNickname" resultType="com.travelertown.travelertown.entity.User">
        select
            ut.user_id,
            ut.username,
            ut.password,
            ut.nickname,
            ut.email,
            ut.sex,
            ut.age,
            ut.create_date,
            ut.update_date,
            rrt.role_register_id,
            rrt.role_id,
            rt.role_name,
            rt.role_name_kor
            <!--            oat.oauth2_id,-->
            <!--            oat.oauth2_name,-->
            <!--            oat.provider_name-->
        from
            user_tb ut
            left outer join role_register_tb rrt on(rrt.user_id = ut.user_id)
            left outer join role_tb rt on(rt.role_id = rrt.role_id)
            <!--            left outer join oauth2_tb oat on(oat.user_id = ut.user_id)-->
        where
            nickname = #{nickname}
    </select>

    <select id="findUserByEmail" resultType="com.travelertown.travelertown.entity.User">
        select
            ut.user_id,
            ut.username,
            ut.password,
            ut.nickname,
            ut.email,
            ut.sex,
            ut.age,
            ut.create_date,
            ut.update_date,
            rrt.role_register_id,
            rrt.role_id,
            rt.role_name,
            rt.role_name_kor
            <!--            oat.oauth2_id,-->
            <!--            oat.oauth2_name,-->
            <!--            oat.provider_name-->
        from
            user_tb ut
            left outer join role_register_tb rrt on(rrt.user_id = ut.user_id)
            left outer join role_tb rt on(rt.role_id = rrt.role_id)
            <!--            left outer join oauth2_tb oat on(oat.user_id = ut.user_id)-->
        where
            email = #{email}
    </select>


    <select id="findUserByOAuth2name" resultMap="UserResultMap">
        select
            ut.user_id,
            ut.username,
            ut.password,
            ut.nickname,
            ut.email,
            ut.sex,
            ut.age,
            ut.create_date,
            ut.update_date,
            rrt.role_register_id,
            rrt.role_id,
            rt.role_name,
            rt.role_name_kor,
            oat.oauth2_id,
            oat.oauth2_name,
            oat.provider_name
        from
            user_tb ut
            left outer join role_register_tb rrt on(rrt.user_id = ut.user_id)
            left outer join role_tb rt on(rt.role_id = rrt.role_id)
            left outer join oauth2_tb oat on(oat.user_id = ut.user_id)
        where
            oat.oauth2_name = #{oAuth2Name}
    </select>


    <!--    <insert id="saveOAuth2" parameterType="com.study.library.entity.OAuth2">-->
<!--        insert into oauth2_tb-->
<!--        values(0, #{oAuth2Name}, #{userId}, #{providerName}, now(), now())-->
<!--    </insert>-->

    <update id="modifyPassword" parameterType="com.travelertown.travelertown.entity.User">
        update
            user_tb
        set
            password = #{password},
            update_date = now()
        where
            user_id = #{userId}
    </update>
    <update id="editSex">
        update
            user_tb
        set
            sex = #{sex},
            update_date = now()
        where
            user_id = #{userId}
    </update>
    <update id="editAge">
        update
            user_tb
        set
            age = #{age},
            update_date = now()
        where
            user_id = #{userId}
    </update>

</mapper>